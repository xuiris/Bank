
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.*;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JButton;
import java.text.SimpleDateFormat;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author kenkh
 */
public class atmInterface extends javax.swing.JFrame {
    
    private final Bank bank;
    private Connection conn;
    private Map<Integer, Account> accounts;
    private String id;
    private Map<Integer, Integer> linked; // pid, aid
    private String day;
    private SimpleDateFormat dateFormat = new SimpleDateFormat("mm-dd-yyyy");
    
    
    public atmInterface() {
        initComponents();
        bank = new Bank();
        conn = bank.getConnection();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton3 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        PinField = new javax.swing.JPasswordField();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        verify = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPasswordField1 = new javax.swing.JPasswordField();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        depositButton = new javax.swing.JButton();
        topupButton = new javax.swing.JButton();
        withdrawButton = new javax.swing.JButton();
        purchaseButton = new javax.swing.JButton();
        transferButton = new javax.swing.JButton();
        collectButton = new javax.swing.JButton();
        wireButton = new javax.swing.JButton();
        payButton = new javax.swing.JButton();
        from = new javax.swing.JLabel();
        money = new javax.swing.JLabel();
        to = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        status = new javax.swing.JLabel();
        fromAcc = new javax.swing.JComboBox<>();
        toAcc = new javax.swing.JTextField();
        amount = new javax.swing.JTextField();
        date = new javax.swing.JTextField();
        dateStatus = new javax.swing.JLabel();

        jButton3.setText("jButton3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ATM \n");
        setMaximumSize(new java.awt.Dimension(2000, 1300));
        setMinimumSize(new java.awt.Dimension(700, 500));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("ENTER YOUR PIN");

        PinField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton2.setText("ENTER");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton1.setText("Back ");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        verify.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        verify.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        verify.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("ENTER YOUR TAXID");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(154, 154, 154)
                .addComponent(PinField, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(verify, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                        .addGap(158, 158, 158))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton2)
                            .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(120, 120, 120))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(106, 106, 106))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(PinField, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addComponent(verify, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(79, Short.MAX_VALUE))))
        );

        jLabel2.setFont(new java.awt.Font("Tahoma", 2, 24)); // NOI18N
        jLabel2.setText("Choose your transaction ");

        depositButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        depositButton.setText("Deposit");
        depositButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                depositButtonActionPerformed(evt);
            }
        });

        topupButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        topupButton.setText("TopUp");
        topupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                topupButtonActionPerformed(evt);
            }
        });

        withdrawButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        withdrawButton.setText("Withdrawal");
        withdrawButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                withdrawButtonActionPerformed(evt);
            }
        });

        purchaseButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        purchaseButton.setText("Purchase");
        purchaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                purchaseButtonActionPerformed(evt);
            }
        });

        transferButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        transferButton.setText("Transfer");
        transferButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transferButtonActionPerformed(evt);
            }
        });

        collectButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        collectButton.setText("Collect");
        collectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                collectButtonActionPerformed(evt);
            }
        });

        wireButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        wireButton.setText("Wire");
        wireButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wireButtonActionPerformed(evt);
            }
        });

        payButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        payButton.setText("Pay-Friend");
        payButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payButtonActionPerformed(evt);
            }
        });

        from.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        from.setText("FROM:");

        money.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        money.setText("AMOUNT:");

        to.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        to.setText("TO:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel7.setText("Enter date:");

        status.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        status.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        status.setText("status\n");

        fromAcc.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        toAcc.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        amount.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        date.setText("mm-dd-yyyy");
        date.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateActionPerformed(evt);
            }
        });

        dateStatus.setText("Date: ");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(109, 109, 109))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(from)
                                    .addComponent(to)
                                    .addComponent(money))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(toAcc, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                                        .addComponent(amount))
                                    .addComponent(fromAcc, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(transferButton)
                                    .addComponent(depositButton))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(withdrawButton)
                                    .addComponent(collectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(20, 20, 20)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(topupButton)
                            .addComponent(wireButton))
                        .addGap(27, 27, 27)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(payButton)
                            .addComponent(purchaseButton)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dateStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(27, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dateStatus)
                .addGap(33, 33, 33)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(topupButton)
                    .addComponent(depositButton)
                    .addComponent(withdrawButton)
                    .addComponent(purchaseButton))
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(transferButton)
                    .addComponent(collectButton)
                    .addComponent(wireButton)
                    .addComponent(payButton))
                .addGap(32, 32, 32)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(from)
                    .addComponent(fromAcc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(toAcc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(to))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(amount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(money, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(status)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

                dispose();
                new BankForm().setVisible(true);
            
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        char[] pin = PinField.getPassword();
        String pass = "";
        for( char x: pin){
            pass +=x;
        }
        
        try{ 
            
            conn = bank.getConnection();
            String qry = "SELECT c.taxID from Customers c where c.PIN = '" + pass + "'";
	        Statement stmt = conn.createStatement();
	        ResultSet rs = stmt.executeQuery(qry);
           if(rs.next()){
               verify.setText("Verification successful");
               id = rs.getString("taxID");
	        	
	        	// find all OPEN accounts associated with this person
	        	accounts = new HashMap<Integer, Account>();
				qry = "SELECT DISTINCT a.aid, a.interest, a.balance, a.open, a.type FROM Accounts a, Owners o"
						+ " WHERE o.taxID = '" + id + "'"
						+ " AND a.aid = o.aid"
						+ " AND a.Open = '1'";
				ResultSet accts = stmt.executeQuery(qry);
				
				while(accts.next()){
					//Retrieve by column name
					int aid  = accts.getInt("aid");
					
					//Add to list of accounts for this customer
					accounts.put(aid, Account.getAccount(conn, aid));
				}
				accts.close();
				
				// Enter linked accounts into linked map
				linked = new HashMap<Integer, Integer>();
				for (Map.Entry<Integer, Account> a: accounts.entrySet()) {
					if (a.getValue().type.equals("Pocket")) {
						stmt = conn.createStatement();
						qry = "SELECT * from LinkedPockets p where p.pid = " + a.getKey();
						rs = stmt.executeQuery(qry);
						if (rs.next()) {
							linked.put(rs.getInt("pid"), rs.getInt("aid"));
						}
					}
				}     
                                                                
                                updateSelectableAccounts();
                                                    
           }
           
           else {
            verify.setText("Incorrect PIN");
           }
            
            
        }catch(Exception e){
			e.printStackTrace();
			status.setText("error");
			System.exit(0);
			}
       
    }//GEN-LAST:event_jButton2ActionPerformed

    private void payButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payButtonActionPerformed
        // TODO add your handling code here:
        try {           
            
            try { getDate(); } catch (Exception E) { return;}
            
            // Get account they want to pull from
            int fromPid = 0;
            Account from = new Account();
            fromPid = chooseAccount();
            if (fromPid == 0) {
                status.setText("Error when choosing pocket account to pay from.");
                return;
            }
            // Pull account, place in Account object, check if its savings or checkings
            from = accounts.get(fromPid);
            if (!(from.type.equals("Pocket"))) {
                status.setText("Please select a Pocket account.");
                return;
            }

            // Get account they want to pay to
            Account to = new Account();
            int toPid = 0;
            try {
                toPid = Integer.parseInt(toAcc.getText());
            } catch (NumberFormatException e) {
                e.printStackTrace();
                status.setText("Error: Enter valid account number.");
                return;
            }

            // Pull account, place in Account object, check if its savings or checkings
            try {
                to = Account.getAccount(conn, toPid);
            } catch (Exception e) {
                e.printStackTrace();
                status.setText("Error finding the pocket account to pay to.");
            }
            if (!(to.type.equals("Pocket"))) {
                status.setText("Cannot pay to a non-Pocket account.");
                return;
            }

            // Check if accounts open
            if (!(from.isOpen && to.isOpen)) {
                status.setText("Cannot transact on closed accounts.");
                return;
            }
            // Check this is a different account.
            if (from.aid == to.aid) {
                status.setText("Cannot pay to the same account.");
                return;
            }

            double amt = 0;
            try {
                amt = Double.parseDouble(amount.getText());
            } catch (NumberFormatException e) {
                e.printStackTrace();
                status.setText("Not a number");
            }

            if (amt <= 0) {
                status.setText("Invalid amount.");
                return;
            }
            
            double total = amt + flatFee(fromPid);
            if (total > from.balance) {
                status.setText("Insufficient funds for this payment.");
                return;
            }

            // Update this in the DB using account object.
            from.balance -= total;
            to.balance += amt;
            // Update this in the DB using account object.
            if (from.updateAccountDB(conn) && to.updateAccountDB(conn)) {
                status.setText("Payment completed.");
                // Add transaction.
                if (Transaction.createPayFriend(conn, day, amt, from.aid, to.aid, id)) {
                    status.setText("Payment completed and Transaction recorded.");
                } else {
                    status.setText("Bad behavior - Error recording transfer transaction.");
                }
            }
        } catch(Exception e){
            e.printStackTrace();
            status.setText("Error processing payment");
        }
    }//GEN-LAST:event_payButtonActionPerformed

    private void wireButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wireButtonActionPerformed
        // TODO add your handling code here:
        try{
            try { getDate(); } catch (Exception E) { return;}

            // Get account they want to pull from
            int fromAid = 0;
            Account from = new Account();
            fromAid = chooseAccount();
            if (fromAid == 0) {
                status.setText("Error when choosing account to wire from.");
                return;
            }
            // Pull account, place in Account object, check if its savings or checkings
            from = accounts.get(fromAid);
            if (!(from.type.equals("Savings") || from.type.equals("Student-Checking") || from.type.equals("Interest-Checking"))) {
                status.setText("Please choose only Savings or Checkings.");
                return;
            }
            
            //receiving account
            Account to = new Account();
            int toAid = 0;
            try {
                toAid = Integer.parseInt(toAcc.getText());
            } catch (NumberFormatException e) {
                e.printStackTrace();
                status.setText("Error: Enter valid account number.");
                return;
            }
            try {
                to = Account.getAccount(conn, toAid);
            } catch (Exception e) {
                e.printStackTrace();
                status.setText("Error finding the account to wire to.");
                return;
            }
            // Check if accounts open
            if (!(from.isOpen && to.isOpen)) {
                status.setText("Cannot transact on closed accounts.");
                return;
            }
            // Check this is a different account.
            if (from.aid == to.aid) {
                status.setText("Cannot wire to the same account.");
                return;
            }

            if (to.type.equals("Savings") || to.type.equals("Student-Checking") || to.type.equals("Interest-Checking")){
                double amt = 0;
                try {
                    amt = Double.parseDouble(amount.getText());
                } catch (NumberFormatException e) {
                    e.printStackTrace();
                    status.setText("Not a number");
                    return;
                }

                if (amt <= 0) {
                    status.setText("Invalid amount.");
                    return;
                }
                
                double fee = (amt*0.02);
                double withFee = amt + fee;

                if (withFee > from.balance) {
                    status.setText("Insufficient funds.");
                    return;
                }

                to.balance += amt;
                from.balance -= withFee;

                if (to.updateAccountDB(conn) && from.updateAccountDB(conn)) {
                    if (Transaction.createWire(conn, day, amt, fromAid, toAid, id)) {
                        status.setText("Wire successful. Transaction recorded.");
                    } else {
                        status.setText("Bad behavior - Error recording wire transaction.");
                    }
                }
            }
            else {
                status.setText("Please choose only Savings or Checkings to wire to.");
                return;
            }

        } catch(Exception e){
            e.printStackTrace();
            status.setText("Error wiring from account");
        }
    }//GEN-LAST:event_wireButtonActionPerformed

    private void collectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_collectButtonActionPerformed
        // TODO add your handling code here:
        try{
            try { getDate(); } catch (Exception E) { return;}
            
            // Get account they want to pull from
            int pid = 0;
            Account pa = new Account();
            pid = chooseAccount();
            if (pid == 0) {
                status.setText("Error when choosing pocket account to collect from.");
                return;
            }
            // Pull account, place in Account object, check if its savings or checkings
            pa = accounts.get(pid);
            if (!(pa.type.equals("Pocket"))) {
                status.setText("Please select a Pocket account.");
                return;
            }

            // find the linked Saving/Checking acct
            int link = linked.get(pid);
            Account la = accounts.get(link);
            
            // Check if accounts open
            if (!(pa.isOpen && la.isOpen)) {
                status.setText("Cannot transact on closed accounts.");
                return;
            }

            double amt = 0;
            try {
                amt = Double.parseDouble(amount.getText());
            } catch (NumberFormatException e) {
                e.printStackTrace();
                status.setText("Not a number");
                return;
            }

            if (amt <= 0) {
                status.setText("Invalid amount.");
                return;
            }

            double finalAmt = amt + (amt*0.03) + flatFee(pid);
            if (finalAmt > pa.balance) {
                status.setText("Insufficient funds.");
                return;
            }

            pa.balance -= finalAmt;
            la.balance += amt;

            if (pa.updateAccountDB(conn) && la.updateAccountDB(conn)) {
                status.setText("Collection successful.");
                if (Transaction.createCollect(conn, day, amt, pid, id)) {
                    status.setText("Collection successful. Transaction recorded.");
                } else {
                    status.setText("Bad behavior - Error recording COLLECT transaction.");
                }
            }

        } catch(Exception e){

            e.printStackTrace();
            status.setText("Error collecting from account");
        }

    }//GEN-LAST:event_collectButtonActionPerformed

    private void transferButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transferButtonActionPerformed
        // TODO add your handling code here:
        try {
            try { getDate(); } catch (Exception E) { return;}
            
            // Get account they want to pull from
            int aid = 0;
            Account from = new Account();
            aid = chooseAccount();
            if (aid == 0) {
                status.setText("Error when choosing account to deposit to.");
                return;
            }
            // Pull account, place in Account object, check if its savings or checkings
            from = accounts.get(aid);
            if (!(from.type.equals("Savings") || from.type.equals("Student-Checking") || from.type.equals("Interest-Checking"))){
                status.setText("Please choose only Savings or Checkings.");
                return;
            }

            // Get account they want to add to
            Account to = new Account();
            aid = 0;
            try {
                aid = Integer.parseInt(toAcc.getText());
            } catch (NumberFormatException e) {
                e.printStackTrace();
                status.setText("Error: Enter valid account number.");
                return;
            }
            if (!(accounts.containsKey(aid))) {
                status.setText("Invalid account number.");
                return;
            }
            // Pull account, place in Account object, check if its savings or checkings
            to = accounts.get(aid);
            if (!(to.type.equals("Savings") || to.type.equals("Student-Checking") || to.type.equals("Interest-Checking"))){
                status.setText("Please choose only Savings or Checkings.");
                return;
            }

            // Check if accounts open
            if (!(from.isOpen && to.isOpen)) {
                status.setText("Cannot transact on closed accounts.");
                return;
            }
            // Check this is a different account.
            if (from.aid == to.aid) {
                status.setText("Cannot pay to the same account.");
                return;
            }
            
            double amt = 0;
            try {
                amt = Double.parseDouble(amount.getText());
            } catch (NumberFormatException e) {
                e.printStackTrace();
                status.setText("Not a number");
            }

            if (amt <= 0) {
                status.setText("Invalid amount.");
                return;
            }
            if (amt > from.balance) {
                status.setText("Insufficient funds.");
                return;
            }
            if (amt > 2000) {
                status.setText("Cannot transfer over $2,000.");
                return;
            }

            from.balance -= amt;
            to.balance += amt;
            // Update this in the DB using account object.
            if (from.updateAccountDB(conn) && to.updateAccountDB(conn)) {
                status.setText("Transfer successful.");
                // Add transaction.
                if (Transaction.createTransfer(conn, day, amt, from.aid, to.aid, id)) {
                    status.setText("Transaction recorded.");
                } else {
                    status.setText("Bad behavior - Error recording transfer transaction.");
                }
            }
        } catch(Exception e){
            e.printStackTrace();
            status.setText("Error transfering into account");
        }
    }//GEN-LAST:event_transferButtonActionPerformed

    private void purchaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_purchaseButtonActionPerformed
        // TODO add your handling code here:
        try {
            try { getDate(); } catch (Exception E) { return;}
            
            // Ask user for account they want to transact on
            int count = 0;
            int pid = 0;
            Account pa = new Account();
            while (count < 3) {
                pid = chooseAccount();
                if (pid == 0) {
                    status.setText("Error when choosing account to purchase from.");
                    return;
                }

                pa = accounts.get(pid);
                if (pa.type.equals("Pocket")) break;
                status.setText("Please choose only a pocket account.");
                count += 1;
            }
            if (count > 2) {
                status.setText("Failed to choose valid account.");
                return;
            }

            // Check if accounts open
            if (!(pa.isOpen)) {
                status.setText("Cannot transact on closed accounts.");
                return;
            }
                       
            double amt = 0;
            try {
                amt = Double.parseDouble(amount.getText());
            } catch (NumberFormatException e) {
                e.printStackTrace();
                status.setText("Not a number");
            }

            if (amt <= 0) {
                status.setText("Invalid amount.");
                return;
            }
            
            double total = amt + flatFee(pid);           
            if ((total) > pa.balance) {
                status.setText("Insufficient funds for this purchase.");
                return;
            }

            pa.balance -= total;

            // Update this in the DB using account object.
            if (pa.updateAccountDB(conn)) {
                status.setText("Purchase successful.");
                if (Transaction.createPurchase(conn, day, total, pid, id)) {
                    status.setText("Transaction recorded.");
                } else {
                    status.setText("Bad behavior - Error recording purchase transaction.");
                }
            }

        } catch(Exception e){
            e.printStackTrace();
            status.setText("Error using account to purchase");
        }

    }//GEN-LAST:event_purchaseButtonActionPerformed

    private void withdrawButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_withdrawButtonActionPerformed
        // TODO add your handling code here:
        try {
            try { getDate(); } catch (Exception E) { return;}
            
            // Ask user for account they want to transact on
            int count = 0;
            int aid = 0;
            Account a = new Account();
            while (count < 3) {
                aid = chooseAccount();
                if (aid == 0) {
                    status.setText("Error when choosing account to withdraw from.");
                    return;
                }
                // Pull account, place in Account object, check if its savings or checkings
                a = accounts.get(aid);
                if (a.type.equals("Savings") || a.type.equals("Student-Checking") || a.type.equals("Interest-Checking")) break;
                status.setText("Please choose only Savings or Checkings.");
                count += 1;
            }
            if (count > 2) {
                status.setText("Failed to choose valid account.");
                return;
            }

            // Check if accounts open
            if (!(a.isOpen)) {
                status.setText("Cannot transact on closed accounts.");
                return;
            }

            
            double amt = 0;
            try {
                amt = Double.parseDouble(amount.getText());
            } catch (NumberFormatException e) {
                e.printStackTrace();
                status.setText("Not a number");
                return;
            }

            if (amt <= 0) {
                status.setText("Invalid amount.");
                return;
            }
            if (amt > a.balance) {
                status.setText("Insufficient funds.");
                return;
            }

            a.balance -= amt;
            // Update this in the DB using account object.
            if (a.updateAccountDB(conn)) {
                status.setText("Withdrawal successful.");
                if (Transaction.createWithdraw(conn, day, amt, aid, id)) {
                    status.setText("Transaction recorded.");
                } else {
                    status.setText("Bad behavior - Error recording withdraw transaction.");
                }
            }
        } catch(Exception e){
            e.printStackTrace();
            status.setText("Error withdrawing from account");
        }

    }//GEN-LAST:event_withdrawButtonActionPerformed

    private void topupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_topupButtonActionPerformed
        // TODO add your handling code here:
        try {
            try { getDate(); } catch (Exception E) { return;}
            
            // Ask user for account they want to transact on
            int count = 0;
            int pid = 0;
            Account pa = new Account();
            while (count < 3) {
                pid = chooseAccount();
                if (pid == 0) {
                    status.setText("Error when choosing account to topup.");
                    return;
                }

                pa = accounts.get(pid);
                if (pa.type.equals("Pocket")) break;
                status.setText("Please choose only a pocket account.");
                count += 1;
            }
            if (count > 2) {
                status.setText("Failed to choose valid account.");
                return;
            }

            // find the linked Saving/Checking acct
            int link = linked.get(pid);
            Account la = accounts.get(link);
            
            // Check if accounts open
            if (!(la.isOpen && pa.isOpen)) {
                status.setText("Cannot transact on closed accounts.");
                return;
            }

            double amt = 0;
            try {
                amt = Double.parseDouble(amount.getText());
            } catch (NumberFormatException e) {
                e.printStackTrace();
                status.setText("Not a number");
                return;
            }

            if (amt <= 0) {
                status.setText("Invalid amount.");
                return;
            }
            if (amt > la.balance) {
                status.setText("Insufficient funds.");
                return;
            }

            pa.balance += amt;
            la.balance -= amt;

            // Update this in the DB using account object.
            if (pa.updateAccountDB(conn) && la.updateAccountDB(conn)) {
                status.setText("Top up successful.");
                if (Transaction.createTopUp(conn, day, amt, pid, id)) {
                    status.setText("Transaction recorded.");
                } else {
                    status.setText("Bad behavior - Error recording TopUp transaction.");
                }
            }

        } catch(Exception e){
            e.printStackTrace();
            status.setText("Error topping up account");
        }
    }//GEN-LAST:event_topupButtonActionPerformed

    private void depositButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_depositButtonActionPerformed
        // TODO add your handling code here:
        try {
            try { getDate(); } catch (Exception E) { return;}
            
            // Ask user for account they want to transact on
            int count = 0;
            int aid = 0;
            Account a = new Account();
            while (count < 3) {
                aid = chooseAccount();
                if (aid == 0) {
                    status.setText("Error when choosing account to deposit to.");
                    return;
                }
                // Pull account, place in Account object, check if its savings or checkings
                a = accounts.get(aid);
                if (a.type.equals("Savings") || a.type.equals("Student-Checking") || a.type.equals("Interest-Checking")) break;
                status.setText("Please choose only Savings or Checkings.");
                count += 1;
            }
            if (count > 2) {
                status.setText("Failed to choose valid account.");
                return;
            }
            
            // Check if accounts open
            if (!(a.isOpen)) {
                status.setText("Cannot transact on closed accounts.");
                return;
            }
            
            double amt = 0;
            try {
                amt = Double.parseDouble(amount.getText());
            } catch (NumberFormatException e) {
                e.printStackTrace();
                status.setText("Not a number");
                return;
            }

            if (amt <= 0) {
                status.setText("Invalid amount.");
                return;
            }

            a.balance += amt;
            // Update this in the DB using account object.
            if (a.updateAccountDB(conn)) {
                status.setText("Deposit successful.");
                // Add transaction.
                if (Transaction.createDeposit(conn, day, amt, aid, id)) {
                    status.setText("Transaction recorded.");
                } else {
                    status.setText("Bad behavior - Error recording deposit transaction.");
                }
            }
        } catch(Exception e){
            e.printStackTrace();
            status.setText("Error depositing into account");
        }

    }//GEN-LAST:event_depositButtonActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        try{
            if(conn!=null){
               conn.close();
               System.out.println("From ATM: Closed connection...");
            }
         }catch(SQLException se){
            se.printStackTrace();
         }
    }//GEN-LAST:event_formWindowClosed

    private void dateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dateActionPerformed
    
    private void getDate() throws Exception {
        day = date.getText();
        if (day.isEmpty()) {
            dateStatus.setText("Default: 12-01-2018");
            day = "12-01-2018";
        }
        else {
            try {
                java.util.Date d = dateFormat.parse(day);
                if (!day.equals(dateFormat.format(d))) {
                    day = "12-01-2018"; 
                    dateStatus.setText("Invalid date, using default: 12-01-2018");
                }
            } catch (Exception e) {
                status.setText("Invalid date.");
                throw e;
            }
            dateStatus.setText("Valid date.");
        }
    }
    
    private int chooseAccount() {
		try {
		
                    
           
			int aid = 0;
			try {
         
				//aid = Integer.parseInt(toAcc.getText());
                                aid = Integer.parseInt((String)fromAcc.getSelectedItem());
			} catch (NumberFormatException e) {
				e.printStackTrace();
				status.setText("Not a number");
			}
			
			if (accounts.containsKey(aid)) {
				return aid;
			}
		} catch(Exception e){
			e.printStackTrace();
			status.setText("Error accessing accounts");
		}
		return 0;
	}
   
    private void updateSelectableAccounts() {
        // clear all accounts.
        fromAcc.removeAllItems();
 
        for (Map.Entry<Integer, Account> a: accounts.entrySet()) {                   
            fromAcc.addItem(a.getKey().toString());
	}
    }
    
    private double flatFee(int p) {
        // Check if we need to apply flat fee. If there exists no other transaction
        // made on the pocket then we return $5, ow $0
        double fee = 0.0;
        String qry = "SELECT DISTINCT p.tid FROM Purchase p"
                + " WHERE p.pid = " + p 
                + " UNION" 
                + " SELECT DISTINCT c.tid FROM Collect c"
                + " WHERE c.fromPid = " + p 
                + " UNION" 
                + " SELECT DISTINCT f.tid FROM PayFriend f"
                + " WHERE f.fromPid = " + p ;
        try {
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(qry);
            if (!(rs.next())) {
                fee = 5.0;
            }
            rs.close();
        } catch (SQLException e) {
            e.printStackTrace();
            System.out.println("Error getting list of transactions");
            status.setText("Error getting list of transactions");
        } 
        
        return fee;
    }
       
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(atmInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(atmInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(atmInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(atmInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            
            public void run() {
                new atmInterface().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPasswordField PinField;
    private javax.swing.JTextField amount;
    private javax.swing.JButton collectButton;
    private javax.swing.JTextField date;
    private javax.swing.JLabel dateStatus;
    private javax.swing.JButton depositButton;
    private javax.swing.JLabel from;
    private javax.swing.JComboBox<String> fromAcc;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JLabel money;
    private javax.swing.JButton payButton;
    private javax.swing.JButton purchaseButton;
    private javax.swing.JLabel status;
    private javax.swing.JLabel to;
    private javax.swing.JTextField toAcc;
    private javax.swing.JButton topupButton;
    private javax.swing.JButton transferButton;
    private javax.swing.JLabel verify;
    private javax.swing.JButton wireButton;
    private javax.swing.JButton withdrawButton;
    // End of variables declaration//GEN-END:variables

    private String encrypt(String pass) {
        try{
            java.security.MessageDigest md = java.security.MessageDigest.getInstance("MD5");
            byte[] array = md.digest(pass.getBytes());
            StringBuffer sb = new StringBuffer();
            for(int i = 0; i <array.length; i++){
                sb.append(Integer.toHexString((array[i] & 0xFF) | 0x100).substring(1,3));
            }
            return sb.toString();
        }catch(java.security.NoSuchAlgorithmException e){}
        return null;
         //To change body of generated methods, choose Tools | Templates.
    }
}
